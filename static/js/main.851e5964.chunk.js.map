{"version":3,"sources":["Movies.js","App.js","index.js"],"names":["Movies","year","title","summary","poster","genres","className","src","alt","map","genre","index","key","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","console","log","setTimeout","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"0TAqCeA,MA/Bf,YAA2D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC5C,OACI,yBAAKC,UAAU,SACX,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,eACX,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,iBACTD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACR,wBAAIC,IAAKD,EAAOL,UAAU,iBACrBI,OAGb,uBAAGJ,UAAU,iBAAiBH,EAAQU,MAAM,EAAE,KAA9C,UC4JDC,G,kNAtKbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IAAI,yEALV,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAGZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IACnCQ,QAAQC,IAAIR,GAPF,2C,kEASS,IAAD,OAClBS,YAAW,WACT,EAAKH,SAAS,CAAEP,WAAW,MAE1B,KACHW,KAAKT,c,+BAEG,IAAD,EACuBS,KAAKZ,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,6BAASX,UAAU,aAChBU,EACC,yBAAKV,UAAU,UACb,0BAAMA,UAAU,eAAhB,eAGA,yBAAKA,UAAU,UACXW,EAAOR,KAAI,SAAAmB,GAAK,OAChB,kBAAC,EAAD,CAAOhB,IAAKgB,EAAMC,GAChBA,GAAID,EAAMC,GACV5B,KAAM2B,EAAM3B,KACZC,MAAO0B,EAAM1B,MACbC,QAASyB,EAAMzB,QACfC,OAAQwB,EAAME,mBACdzB,OAAQuB,EAAMvB,kB,GAxCd0B,IAAMC,YCHxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.851e5964.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\n// state가 없는 경우  class component일 필요가 없음\r\n\r\nfunction Movies({ year, title, summary, poster, genres }) {\r\n    return (\r\n        <div className=\"movie\">\r\n            <img src={poster} alt={title} title={title}></img>\r\n            <div className=\"movie__data\">\r\n                <h3 className=\"movie__title\">{title}</h3>\r\n                <h5 className=\"movie__year\">{year}</h5>\r\n                <ul className=\"movie__genres\">\r\n                    {genres.map((genre, index) =>\r\n                        <li key={index} className=\"genres__genre\">\r\n                            {genre}\r\n                        </li>)}\r\n                </ul>\r\n                <p className=\"movie_summary\">{summary.slice(0,200)}...</p>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n    // 리액트에서는 className으로 -\r\n}\r\n\r\nMovies.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n\r\n}\r\n\r\nexport default Movies;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport axios from \"axios\";\r\nimport Movie from \"./Movies\";\r\nimport \"./App.css\"\r\n\r\n// #3.1\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    isLoading: true,\r\n    movies: []\r\n  };\r\n\r\n  getMovies = async () => {\r\n    const {\r\n      data: {\r\n        data: { movies }\r\n      }\r\n    } = await axios.get(\"https://yts-proxy.nomadcoders1.now.sh/list_movies.json/sort-by=rating\");\r\n    this.setState({ movies, isLoading: false })     // movies : movies\r\n    console.log(movies)\r\n  };\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      this.setState({ isLoading: false });\r\n\r\n    }, 6000);\r\n    this.getMovies();\r\n  };\r\n  render() {\r\n    const { isLoading, movies } = this.state;\r\n    return (\r\n      <section className=\"container\">\r\n        {isLoading ? (\r\n          <div className=\"loader\">\r\n            <span className=\"loader_text\">Loading...</span>\r\n          </div>\r\n        ) : (\r\n            <div className=\"movies\">\r\n              { movies.map(movie => (\r\n                <Movie key={movie.id}\r\n                  id={movie.id}\r\n                  year={movie.year}\r\n                  title={movie.title}\r\n                  summary={movie.summary}\r\n                  poster={movie.medium_cover_image}\r\n                  genres={movie.genres}\r\n                />\r\n              ))}\r\n            </div>\r\n          )}\r\n      </section>\r\n    )\r\n  }\r\n  //3.2\r\n  //life cycle\r\n  //1. mounting  : being born\r\n  // counstructor (JS)\r\n  //2. updating\r\n  //3. unmounting : component die\r\n\r\n  // state = {\r\n  //   count: 0\r\n  // }\r\n  // render() {\r\n  //   console.log(\"i'm rendering\")\r\n  //   return <div>\r\n  //     <h1>The number is :  {this.state.count}</h1>\r\n  //     <button onClick={this.add}>add</button>\r\n  //     {/*this.add() : 즉시 실행 , this.add  : 클릭했을때만 실행  */}\r\n  //     <button onClick={this.minus}>minus</button>\r\n  //   </div>\r\n  // }\r\n\r\n  // add = () => {\r\n  //   console.log(\"Add\");\r\n  //   // this.setState({ count: this.state.count + 1 })\r\n  //   this.setState(current => ({ count: current.count + 1 }))\r\n\r\n  // };\r\n  // minus = () => {\r\n  //   console.log(\"minus\");\r\n  //   this.setState(current => ({ count: current.count - 1 }))\r\n  // };\r\n  // componentDidMount() {\r\n  //   console.log(\"component rendered\")\r\n  // }\r\n  // componentDidUpdate() {\r\n  //   console.log(\" i just updated \")\r\n  // }\r\n  // componentWillUnmount() {\r\n  //   console.log(\"good bye world\")\r\n  // }\r\n\r\n\r\n  // 3.1\r\n  // render method 상속받아서 사용\r\n  //function component , class component가 있음\r\n  // react class commponent의 render method를 실행함\r\n  // c c 가 state를 갖고 있음 object , data를 넣을 공간을 가짐 ( 동적 data )\r\n  // 리액트는 render function을 refresh 하지 않음\r\n  //setState 하면 state update하고 render function refresh\r\n  // everytime you call setstate , react is going to  rerender\r\n\r\n}\r\n\r\n\r\n// function Food({ name, picture, rating }) {\r\n//   return (\r\n//     <div>\r\n//       <h1>I like {name}</h1>\r\n//       <h4>{rating}/5.0</h4>\r\n//       <img src={picture} alt={name} />\r\n//     </div>)\r\n// }\r\n\r\n\r\n// Food.propTypes = {\r\n//   name: PropTypes.string.isRequired,\r\n//   picture: PropTypes.string.isRequired,\r\n//   rating: PropTypes.number.isRequired\r\n// };\r\n// // 동적 데이터가 있는 컴포넌트\r\n\r\n// const foodILike = [\r\n//   {\r\n//     id: \"1\",\r\n//     name: \"kimchi\",\r\n//     image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Carabao_mangoes_%28Philippines%29.jpg/220px-Carabao_mangoes_%28Philippines%29.jpg\",\r\n//     rating: 5\r\n//   },\r\n//   {\r\n//     id: \"2\",\r\n//     name: \"mango\",\r\n//     image: \"https://www.maangchi.com/wp-content/uploads/2019/11/vegankimchi-insta-650x650.jpg\",\r\n//     rating: 4.9\r\n//   },\r\n//   // {\r\n//   //   eunsu : \"eunsu\"\r\n//   // }\r\n// ]\r\n\r\n// function renderFood(dish) {\r\n//   console.log(dish);\r\n//   return <Food key={dish.id} name={dish.name} picture={dish.image} />\r\n// }\r\n// function App() {\r\n//   // function compoment로 부름\r\n//   return (\r\n//     <div>\r\n//       {/* <h1>hello</h1> */}\r\n//       {/* dish : just item , normal object of map */}\r\n//       {foodILike.map(dish => (<Food key={dish.id} name={dish.name} picture={dish.image} rating={dish.rating} />))}\r\n//       {/* {foodILike.map(renderFood)} */}\r\n//     </div>\r\n//   )\r\n\r\n//   // return (\r\n//   //   <div>\r\n//   //     <h1>hello</h1>\r\n//   //     <Food\r\n//   //       fav=\"kimchi\"\r\n//   //       something={true}\r\n//   //       papapapa={[\"hello\", 1, 2, 3, 4, 5, true]}\r\n//   //     />\r\n//   //     <Food eunsu=\"eunsueunsu\" fav=\"eunsu\"></Food>\r\n//   //     <Food eunsu=\"eunsueunsu\" fav=\"jieun\"></Food>\r\n//   //     <Food eunsu=\"eunsueunsu\" fav=\"aaaa\"></Food>\r\n//   //     <Food eunsu=\"eunsueunsu\" fav=\"oooo\"></Food>\r\n\r\n//   //   </div>\r\n//   // )\r\n// }\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}